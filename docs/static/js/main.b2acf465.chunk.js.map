{"version":3,"sources":["Header.js","SectionBlank.js","ChoiceButton.js","SectionChoices.js","SectionIntro.js","SectionIssues.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","SectionBlank","props","ChoiceButton","state","extraClass","this","mode","value","onClick","handleClick","text","Component","SectionChoices","newMode","handleChangeSection","SectionIntro","SectionIssues","Footer","href","target","rel","App","setState","section","a","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAaeA,MAXf,WACI,OACI,4BAAQC,UAAU,cAChB,4BACE,8CAAS,iCAAU,wDAAa,qCCK7BC,MATf,SAAsBC,GAClB,OACI,6BAASF,UAAU,eACjB,qCACA,yGCwBKG,G,kBA1BX,WAAYD,GAAO,IAAD,8BACd,4CAAMA,KACDE,MAAQ,GAFC,E,sEAQd,IAAIC,EAOJ,OALIA,EADDC,KAAKJ,MAAMK,OAASD,KAAKJ,MAAMM,MACjB,yBAEA,6BAIb,4BACIR,UAAS,wBAAmBK,GAC5BI,QAASH,KAAKJ,MAAMQ,aAEnBJ,KAAKJ,MAAMS,U,GArBDC,cCsCZC,E,YArCX,WAAYX,GAAO,qEACTA,I,yEAGEY,GAERR,KAAKJ,MAAMa,oBAAoBD,K,+BAG1B,IAAD,OACJ,OACI,6BAASd,UAAU,uBACf,2BACI,kBAAC,EAAD,CACIU,YAAa,kBAAM,EAAKA,YAAY,UACpCH,KAAMD,KAAKJ,MAAMK,KACjBC,MAAM,QACNG,KAAK,UAET,kBAAC,EAAD,CACID,YAAa,kBAAM,EAAKA,YAAY,WACpCH,KAAMD,KAAKJ,MAAMK,KACjBC,MAAM,SACNG,KAAK,WAET,kBAAC,EAAD,CACID,YAAa,kBAAM,EAAKA,YAAY,WACpCH,KAAMD,KAAKJ,MAAMK,KACjBC,MAAM,SACNG,KAAK,kB,GA9BAC,aCQdI,MATf,SAAsBd,GAClB,OACI,6BAASF,UAAU,eACjB,0CACA,wIC0BKiB,MA9Bf,SAAuBf,GACnB,OACI,6BAASF,UAAU,eACjB,sCACA,2GACA,wBAAIA,UAAU,mBACd,yEACA,oLAEA,wBAAIA,UAAU,mBACd,iEACA,6HAEA,wBAAIA,UAAU,mBACd,yEACA,sJAEA,wBAAIA,UAAU,mBACd,0EACA,2FACA,wGACA,wBAAIA,UAAU,mBACd,iEACA,yNAEA,iICNKkB,MAnBf,WACI,OACI,4BAAQlB,UAAU,cAChB,2BACC,4CACa,uBACVA,UAAU,WACVmB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJM,aC2CTC,E,YAxCb,WAAYpB,GAAO,IAAD,8BAChB,4CAAMA,KACDE,MAAQ,CACXG,KAAM,SAHQ,E,iFAOEO,GAClBR,KAAKiB,SAAS,CACZhB,KAAMO,M,+BAIA,IACJU,EADG,OAEP,OAAOlB,KAAKF,MAAMG,MAChB,IAAK,SACHiB,EAAU,kBAAC,EAAD,MACZ,MACA,IAAK,QACHA,EAAU,kBAAC,EAAD,MACZ,MACA,IAAK,SAGL,QACEA,EAAU,kBAAC,EAAD,MAGd,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAgBe,oBAAqB,SAACU,GAAD,OAAO,EAAKV,oBAAoBU,IAAIlB,KAAMD,KAAKF,MAAMG,OACzFiB,EACD,kBAAC,EAAD,W,GAnCUZ,aCGEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b2acf465.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"App-header\">\r\n          <h1>\r\n            <ruby>鬢長 <rp>(</rp><rt>びんなが</rt><rp>)</rp></ruby>\r\n          </h1>\r\n        </header>\r\n    );\r\n}\r\n\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction SectionBlank(props){\r\n    return (\r\n        <section className=\"App-section\">\r\n          <h2>Blank</h2>\r\n          <p>This section is intentionally blank.  Apart from this text, obviously...</p>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default SectionBlank;","import React, { Component } from 'react';\r\nimport './ChoiceButton.css';\r\n\r\nclass ChoiceButton extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            // if still empty\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let extraClass;\r\n        if(this.props.mode === this.props.value){\r\n            extraClass = \"Choice-button-selected\"\r\n        }else{\r\n            extraClass = \"Choice-button-not-selected\"\r\n        }\r\n        // using an ES6 string literal `Hello ${Surname}.`\r\n        return (\r\n            <button \r\n                className={`Choice-button ${extraClass}`}\r\n                onClick={this.props.handleClick}\r\n                >\r\n                {this.props.text}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChoiceButton;","import React, { Component } from 'react';\r\nimport ChoiceButton from './ChoiceButton';\r\n\r\nclass SectionChoices extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    handleClick(newMode){\r\n        // we will pass this to the parent object to propogate\r\n        this.props.handleChangeSection(newMode);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <section className=\"App-section-choices\">\r\n                <p>\r\n                    <ChoiceButton \r\n                        handleClick={() => this.handleClick(\"intro\")}\r\n                        mode={this.props.mode}  \r\n                        value=\"intro\"\r\n                        text=\"Intro\"\r\n                        />\r\n                    <ChoiceButton \r\n                        handleClick={() => this.handleClick(\"issues\")}\r\n                        mode={this.props.mode} \r\n                        value=\"issues\"\r\n                        text=\"Issues\"\r\n                        />\r\n                    <ChoiceButton \r\n                        handleClick={() => this.handleClick(\"proto1\")}\r\n                        mode={this.props.mode}\r\n                        value=\"proto1\" \r\n                        text=\"Proto I\"\r\n                        />\r\n                </p>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SectionChoices;","import React from 'react';\r\n\r\nfunction SectionIntro(props){\r\n    return (\r\n        <section className=\"App-section\">\r\n          <h2>Aspiration</h2>\r\n          <p>a prototype for online and offline editing of Japanese text that's as close as possible to Genko Yoshi.</p>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default SectionIntro;","import React from 'react';\r\n\r\nfunction SectionIssues(props){\r\n    return (\r\n        <section className=\"App-section\">\r\n          <h2>Issues</h2>\r\n          <p>There are several problems that I need to solve to have a workable solution.</p>\r\n          <hr className=\"App-section-hr\"/>\r\n          <h3>Simple Method of editing HTML Ruby Markup</h3>\r\n          <p>To get the visualising started early, we need a simple way of editing the backend ruby notation.\r\n            This will most likely help inform the end UX design.</p>\r\n          <hr className=\"App-section-hr\"/>\r\n          <h3>Rendering Content in a Fixed Grid</h3>\r\n          <p>The pages are typically a fixed row and column count.  So text must correctly \r\n            flow over pages.</p>\r\n          <hr className=\"App-section-hr\"/>\r\n          <h3>Special Problems with Rendering in a Grid</h3>\r\n          <p>For example, if a sentence ends at the end of a row the final punctuation mark \r\n            is \"squashed\" into the final kanji cell.</p>\r\n          <hr className=\"App-section-hr\"/>\r\n          <h3>Horizontal and Vertical Rendering and Flow</h3>\r\n          <p>Pages could be written in vertical or horizontal formatting.</p>\r\n          <p>It would be nice to be able to include blocks for things like images too.</p>\r\n          <hr className=\"App-section-hr\"/>\r\n          <h3>Smooth Text Entry and Intelisense</h3>\r\n          <p>Previous experiments have revealed that editing in a character-by-character style robs the native UI of\r\n            it's ability to present auto-suggestions (which are vital to Japanese text entry).</p>\r\n          <p>We may have to do some clever 'diffing' to incorporate the new text into the existing text flow.</p>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default SectionIssues;","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"App-footer\">\r\n          <p>\r\n           <span>\r\n             Powered by <a\r\n              className=\"App-link\"\r\n              href=\"https://reactjs.org\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              >\r\n                React\r\n              </a>\r\n            </span>\r\n          </p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport SectionBlank from './SectionBlank';\nimport SectionChoices from './SectionChoices';\nimport SectionIntro from './SectionIntro';\nimport SectionIssues from './SectionIssues';\nimport Footer from './Footer';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      mode: 'intro',\n    };\n  }\n\n  handleChangeSection(newMode){\n    this.setState({\n      mode: newMode,\n    });\n  }\n\n  render() {    \n    let section;\n    switch(this.state.mode){\n      case \"issues\":\n        section = <SectionIssues/>;\n      break;\n      case \"intro\":\n        section = <SectionIntro/>;\n      break;\n      case \"proto1\":\n        section = <SectionBlank/>;\n      break;\n      default:\n        section = <SectionBlank/>;\n      break;\n    }\n    return (\n      <div className=\"App\">\n        <Header />\n        <SectionChoices handleChangeSection={(a) => this.handleChangeSection(a)} mode={this.state.mode} />\n        {section}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}